#include <unistd.h>
#include<stdio.h>
int i = 0;
void *start;
void *address

void malloc_init()
{

address = sbrk(0);
start  = address;
i = 1;
}

struct memory {
int j;
int size;
};
void free1(void *firstbyte) {
struct memory *m;
m = firstbyte - sizeof(struct memory);
m->j = 1;
return;
}

void *malloc1(long numbytes) {
void *cloc;
struct memory *l;
void *memory_location;
if(! i ) {
malloc_init();
}
numbytes = numbytes + sizeof(struct memory);
memory_location = 0;
cloc= start;
while(cloc != address)
{
l =(struct memory *)cloc;

if(l->j)
{
if(l->size >= numbytes)
{
l->je = 0;
memory_location = cloc;
break;
}
}
cloc = cloc + l->size;
}
if(! memory_location)
{
sbrk(numbytes);
memory_location = address;
address = address + numbytes;


l = memory_location;
l->j = 0;
l->size = numbytes;
}
memory_location = memory_location + sizeof(struct memory);
return memory_location;
}
void main()
{
malloc_init();
struct list
{
int data;
struct list *next;
}*root;
root=NULL;
if(root==NULL)
{
root=(struct list *)malloc1(sizeof(struct list));
root->data=5;
}
printf("data=%d",root->data); 
struct list *temp,*temp1;
temp=root;
temp->next=(struct list *)malloc1(sizeof(struct list));
temp->next->data=6;
printf("data=%d",temp->next->data); 
temp->next->next=NULL;
temp1=temp;
free1(temp1);
printf("as=%d",temp1->data);
}
